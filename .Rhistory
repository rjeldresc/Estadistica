install.packages("rstudioapi")
install.packages("dplyr")
rstudioapi::addTheme("https://raw.githubusercontent.com/batpigandme/night-owlish/master/rstheme/night-owlish.rstheme", apply = TRUE)
rstudioapi::addTheme("https://raw.githubusercontent.com/batpigandme/night-owlish/master/rstheme/night-owlish.rstheme", apply = TRUE)
install.packages(c("shiny", "dplyr"))
x
x
x<-1
x
x
x
X
x
x
x
x
x
x
x<-1
x<-1
x<-1
x<-1
x
x
x<-1
x
print(x)
x
print(x)
y<-444
y
y
x
install.packages("survival")
install.packages(c("dplyr", "purrr", "tidyverse"))
install.packages(c("shiny", "readr"))
install.packages("ggplot2")
install.packages("reshape")
install.packages("odbc")
odbcListDrivers() %>% filter(name %like% "SQL Server" & !name %like% "Teradata")
install.packages("DBI")
library(DBI)
db_conn <- DBI::dbConnect(odbc::odbc(),
Driver   = "SQL Server",
Server   = "localhost",
Database = "oli",
UID      = "rodrigo",
PWD      = "enter",
Trusted_Connection = "True",
Port     = 1433,
ApplicationIntent = "ReadOnly"
)
db_conn <- DBI::dbConnect(odbc::odbc(),
Driver   = "SQL Server",
Server   = "DESKTOP-NKC9QNV",
Database = "oli",
UID      = "rodrigo",
PWD      = "enter",
Trusted_Connection = "True",
Port     = 1433,
ApplicationIntent = "ReadOnly"
)
library(odbc)
con <- dbConnect(odbc(),
driver = "SQL Server", # Nombre del controlador ODBC
server = "DESKTOP-NKC9QNV",
database = "Northwind",
uid = "rodrigo",
pwd = "enter")
library(odbc)
con <- dbConnect(odbc(),
driver = "SQL Server", # Nombre del controlador ODBC
server = "DESKTOP-NKC9QNV",
database = "Northwind",
uid = "sa",
pwd = "enter")
install.packages("RPostgreSQL")
library(RPostgreSQL)
con <- dbConnect(PostgreSQL(),
user = "rodrigo",
password = "enter",
dbname = "R",
host = "localhost",
port = 5432) # puerto por defecto es 5432
con <- dbConnect(PostgreSQL(),
user = "rodrigo",
password = "enter",
dbname = "R",
host = "127.0.0.1",
port = 5432) # puerto por defecto es 5432
install.packages("odbc")
install.packages("odbc")
library(odbc)
# Establecer la conexión
con <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "DESKTOP-NKC9QNV",
Database = "bbdd_conversion",
UID = "rodrigo",
PWD = "enter")
con <- dbConnect(odbc(),
Driver = "ODBC Driver 17 for SQL Server",
Server = "DESKTOP-NKC9QNV",
Database = "bbdd_conversion",
UID = "rodrigo",
PWD = "enter")
result <- dbGetQuery(con, "SELECT * FROM CampoParametros")
con <- dbConnect(odbc(),
Driver = "ODBC Driver 17 for SQL Server",
Server = "DESKTOP-NKC9QNV",
Database = "bbdd_conversion",
UID = "rodrigo",
PWD = "enter")
print(result)
dbDisconnect(con)
library(dplyr)
library(odbc)
# Establecer la conexión
con <- dbConnect(odbc(),
Driver = "ODBC Driver 17 for SQL Server",
Server = "DESKTOP-NKC9QNV",
Database = "bbdd_conversion",
UID = "rodrigo",
PWD = "enter")
result <- dbGetQuery(con, "SELECT * FROM CampoParametros")
print(result)
dbDisconnect(con)
?cor
install.packages("tidyverse")
install.packages(c("palmerpenguins", "remotes"))
# Crear una lista en R
mi_lista <- list(
nombre = "Juan",
edad = 30,
ciudad = "Ciudad de México",
intereses = c("programación", "estadística", "visualización"),
puntajes = c(80, 90, 75, 85)
)
# Mostrar la lista
print(mi_lista)
# Crear un vector de números
numeros <- c(10, 20, 30, 40, 50)
# Mostrar el vector
print(numeros)
# Crear un vector de caracteres
colores <- c("rojo", "verde", "azul")
# Mostrar el vector de caracteres
print(colores)
# Crear un vector lógico
booleanos <- c(TRUE, FALSE, TRUE, TRUE, FALSE)
# Mostrar el vector lógico
print(booleanos)
# Crear una lista en R
mi_lista <- list(
nombre = "Juan",
edad = 30,
ciudad = "Ciudad de México",
intereses = c("programación", "estadística", "visualización"),
puntajes = c(80, 90, 75, 85)
)
# Mostrar la lista
print(mi_lista)
# Crear una matriz en R
matriz <- matrix(
c(1, 2, 3, 4, 5, 6),  # Datos para la matriz
nrow = 2,             # Número de filas
ncol = 3,             # Número de columnas
byrow = TRUE          # Rellenar por filas (TRUE) o por columnas (FALSE)
)
# Mostrar la matriz
print(matriz)
# Crear un data frame en R
data_frame <- data.frame(
Nombre = c("Juan", "María", "Carlos"),
Edad = c(25, 30, 28),
Ciudad = c("Ciudad de México", "Madrid", "Buenos Aires"),
Puntaje = c(80, 75, 90)
)
# Mostrar el data frame
print(data_frame)
install.packages("openxlsx")
setwd("d:/dev/Estadistica")
datos <- matrix(c(2,22,6,17,41,12,24,32,8),3,3)
colnames(datos)=c("Malo","Regular","Bueno")
rownames(datos)=c("A","B","C")
base1 <- as.data.frame(datos)
attach(base1)
setwd("d:/dev/Estadistica")
######## DOS VARIABLES CATEGÓRICAS ########
#### Crear data frame ####
datos <- matrix(c(2,22,6,17,41,12,24,32,8),3,3)
colnames(datos)=c("Malo","Regular","Bueno")
rownames(datos)=c("A","B","C")
base1 <- as.data.frame(datos)
attach(base1)
#### Distribucion porcentual del Tipo y Estado(Malo, Regular, Bueno) ####
tabla <- as.table(datos)
t1 <- round(prop.table(tabla)*100,0)
addmargins(t1)
#### Distribucion porcentual del Tipo, según Estado(Malo, Regular, Bueno) ####
t2 <- round(prop.table(tabla, margin = 2)*100,0) #número 2,  con respecto a las columanas
addmargins(t2,1)
#### Distribucion porcentual del Estado(Malo, Regular, Bueno), según Tipo ####
t3 <- round(prop.table(tabla,1)*100,0)   #número 1, con respecto a las filas
addmargins(t3,2)
#### GRÁFICOS ####
barplot(t2,
col=c("blue","red","green"),
main="Distribución porcentual del tipo de vivienda según el estado",
ylab="%",
legend.text=rownames(t2),
beside=TRUE,
ylim=c(0,80))
setwd("d:/dev/Estadistica")
######## DOS VARIABLES CATEGÓRICAS ########
#### Crear data frame ####
datos <- matrix(c(2,22,6,17,41,12,24,32,8),3,3)
colnames(datos)=c("Malo","Regular","Bueno")
rownames(datos)=c("A","B","C")
base1 <- as.data.frame(datos)
attach(base1)
#### Distribucion porcentual del Tipo y Estado(Malo, Regular, Bueno) ####
tabla <- as.table(datos)
t1 <- round(prop.table(tabla)*100,0)
addmargins(t1)
#### Distribucion porcentual del Tipo, según Estado(Malo, Regular, Bueno) ####
t2 <- round(prop.table(tabla, margin = 2)*100,0) #número 2,  con respecto a las columanas
addmargins(t2,1)
#### Distribucion porcentual del Estado(Malo, Regular, Bueno), según Tipo ####
t3 <- round(prop.table(tabla,1)*100,0)   #número 1, con respecto a las filas
addmargins(t3,2)
#### GRÁFICOS ####
barplot(t2,
col=c("blue","red","green"),
main="Distribución porcentual del tipo de vivienda según el estado",
ylab="%",
legend.text=rownames(t2),
beside=TRUE,
ylim=c(0,80))
barplot(t3,
col=c("blue","red","green"),
main="Distribución porcentual del tipo de vivienda según el estado",
ylab="%",
legend.text=rownames(t2),
beside=TRUE,
ylim=c(0,80))
t4 <- t(as.matrix(t3)) #para invertir los ejes al graficar
barplot(t4,
col=rainbow(3),
main="Distribución porcentual del tipo del estado según tipo de vivienda",
ylab="%",
legend.text=rownames(t4),
beside=TRUE,
ylim=c(0,60))
barplot(t4,
col=rainbow(3),
main="Distribución porcentual del tipo de vivienda según el estado",
ylab="%",
legend.text=rownames(t4))
write.xlsx(resultado_hombre, "Resultado.xlsx",sheetName = "Hombres") #en xlsx
hombres <- c(72,69,98,66,85,76,79,80,77) #vector con 9 elementos
mujeres <- c(81,67,90,78,81,80,76) #vector con 7 elementos
resultado_hombre <- summary(hombres)
resultado_mujeres <- summary(mujeres)
#un recordatorio para guardar tablas
write.xlsx(resultado_hombre, "Resultado.xlsx",sheetName = "Hombres") #en xlsx
setwd("d:/dev/Estadistica")
######## DOS VARIABLES CATEGÓRICAS ########
#### Crear data frame ####
datos <- matrix(c(2,22,6,17,41,12,24,32,8),3,3)
colnames(datos)=c("Malo","Regular","Bueno")
rownames(datos)=c("A","B","C")
base1 <- as.data.frame(datos)
attach(base1)
#### Distribucion porcentual del Tipo y Estado(Malo, Regular, Bueno) ####
tabla <- as.table(datos)
t1 <- round(prop.table(tabla)*100,0)
addmargins(t1)
#### Distribucion porcentual del Tipo, según Estado(Malo, Regular, Bueno) ####
t2 <- round(prop.table(tabla, margin = 2)*100,0) #número 2,  con respecto a las columanas
addmargins(t2,1)
#### Distribucion porcentual del Estado(Malo, Regular, Bueno), según Tipo ####
t3 <- round(prop.table(tabla,1)*100,0)   #número 1, con respecto a las filas
addmargins(t3,2)
#### GRÁFICOS ####
barplot(t2,
col=c("blue","red","green"),
main="Distribución porcentual del tipo de vivienda según el estado",
ylab="%",
legend.text=rownames(t2),
beside=TRUE,
ylim=c(0,80))
barplot(t2,
col=c("blue","red","green"),
main="Distribución porcentual del tipo del estado según tipo de vivienda",
ylab="%",
legend.text=rownames(t2))
#ojo!!! el gráfico que queremos llegar (el de la presentacion) no es igual
barplot(t3,
col=c("blue","red","green"),
main="Distribución porcentual del tipo de vivienda según el estado",
ylab="%",
legend.text=rownames(t2),
beside=TRUE,
ylim=c(0,80))
t4 <- t(as.matrix(t3)) #para invertir los ejes al graficar
barplot(t4,
col=rainbow(3),
main="Distribución porcentual del tipo del estado según tipo de vivienda",
ylab="%",
legend.text=rownames(t4),
beside=TRUE,
ylim=c(0,60))
barplot(t4,
col=rainbow(3),
main="Distribución porcentual del tipo de vivienda según el estado",
ylab="%",
legend.text=rownames(t4))
######## DOS VARIABLES CONTINUAS ########
base2 <- readxl::read_excel("Base_ejemplo__Bivariada.xlsx", sheet = "parte2")
setwd("d:/dev/Estadistica")
#grafico de puntos
x1<-seq(1,9,1)
x2<-seq(1,7,1)
p1<-plot(x1,hombres)
p2<-plot(x2,mujeres)
par(mfrow=c(1,2))
p1<-plot(x1,hombres)
p2<-plot(x2,mujeres)
